using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web.UI;
using System.Web.UI.WebControls;
using GalleryServerPro.Business;
using GalleryServerPro.Business.Interfaces;
using GalleryServerPro.Events.CustomExceptions;
using GalleryServerPro.Web.Controller;
using GalleryServerPro.WebControls;

namespace GalleryServerPro.Web.Pages.Admin
{
	/// <summary>
	/// A page-like user control for administering gallery settings.
	/// </summary>
	public partial class gallerysettings : Pages.AdminPage
	{
		#region Private Fields

		private List<String> _usersToNotifyWhenErrorOccurs;

		#endregion

		#region Properties

		/// <summary>
		/// Gets the list of user names of accounts to notify when an error occurs. The value is a collection that is 
		/// parsed from the comma-delimited string stored in the UsersToNotifyWhenErrorOccurs configuration setting.
		/// During postbacks the value is retrieved from the hidden form field that is maintained by the jQuery MultiSelect plugin.
		/// </summary>
		/// <value>The list of user names of accounts to notify when an error occurs.</value>
		private List<String> UsersToNotifyWhenErrorOccursCollection
		{
			get
			{
				if (this._usersToNotifyWhenErrorOccurs == null)
				{
					this._usersToNotifyWhenErrorOccurs = new List<string>();

					if (IsPostBack)
					{
						foreach (var userName in GetUsersToNotifyUserNames())
						{
							this._usersToNotifyWhenErrorOccurs.Add(userName.Trim());
						}
					}
					else
					{
						foreach (var user in GallerySettingsUpdateable.UsersToNotifyWhenErrorOccurs)
						{
							this._usersToNotifyWhenErrorOccurs.Add(user.UserName);
						}
					}
				}

				return this._usersToNotifyWhenErrorOccurs;
			}
		}

		/// <summary>
		/// Gets a value indicating whether the user is allowed to save changes on this page.
		/// </summary>
		/// <value><c>true</c> if saving is enabled; otherwise, <c>false</c>.</value>
		private static bool SavingIsEnabled
		{
			get
			{
				return (AppSetting.Instance.License.IsInTrialPeriod || AppSetting.Instance.License.IsValid);
			}
		}

		#endregion

		#region Protected Events

		/// <summary>
		/// Handles the Init event of the Page control.
		/// </summary>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
		protected void Page_Init(object sender, EventArgs e)
		{
			this.AdminHeaderPlaceHolder = phAdminHeader;
			this.AdminFooterPlaceHolder = phAdminFooter;
		}

		/// <summary>
		/// Handles the Load event of the Page control.
		/// </summary>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
		protected void Page_Load(object sender, EventArgs e)
		{
			this.CheckUserSecurity(SecurityActions.AdministerSite | SecurityActions.AdministerGallery);

			ConfigureControlsEveryTime();

			if (!IsPostBack)
			{
				ConfigureControlsFirstTime();
			}
		}

		/// <summary>
		/// Determines whether the event for the server control is passed up the page's UI server control hierarchy.
		/// </summary>
		/// <param name="source">The source of the event.</param>
		/// <param name="args">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
		/// <returns>
		/// true if the event has been cancelled; otherwise, false. The default is false.
		/// </returns>
		protected override bool OnBubbleEvent(object source, EventArgs args)
		{
			//An event from the control has bubbled up.  If it's the Ok button, then run the
			//code to save the data to the database; otherwise ignore.
			Button btn = source as Button;
			if ((btn != null) && (((btn.ID == "btnOkTop") || (btn.ID == "btnOkBottom"))))
			{
				SaveSettings();
			}

			return true;
		}

		/// <summary>
		/// Handles the Click event of the btnThrowError control.
		/// </summary>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
		protected void btnThrowError_Click(object sender, EventArgs e)
		{
			throw new WebException("This is a test error generated by Gallery Server Pro.");
		}

		/// <summary>
		/// Handles the OnBeforeUnBindControl event of the wwDataBinder control.
		/// </summary>
		/// <param name="item">The wwDataBindingItem item.</param>
		protected bool wwDataBinder_BeforeUnbindControl(WebControls.wwDataBindingItem item)
		{
			if (!BeforeUnbind_ProcessDisplayBehaviorControls(item))
				return false;

			return true;
		}

		private bool BeforeUnbind_ProcessDisplayBehaviorControls(wwDataBindingItem item)
		{
			// When allow HTML is unchecked, several child items are disabled via javascript. Disabled HTML items are not
			// posted during a postback, so we don't have accurate information about their states. For these controls don't save
			// anything by returning false. Furthermore, to prevent these child controls from incorrectly reverting to an
			// empty or unchecked state in the UI, assign their properties to their config setting. 

			if (!this.chkShowHeader.Checked)
			{
				if (item.ControlId == this.txtWebsiteTitle.ID)
				{
					txtWebsiteTitle.Text = GallerySettingsUpdateable.GalleryTitle;
					return false;
				}

				if (item.ControlId == this.txtWebsiteTitleUrl.ID)
				{
					txtWebsiteTitleUrl.Text = GallerySettingsUpdateable.GalleryTitleUrl;
					return false;
				}

				if (item.ControlId == this.chkShowLogin.ID)
				{
					this.chkShowLogin.Checked = GallerySettingsUpdateable.ShowLogin;
					return false;
				}

				if (item.ControlId == this.chkShowSearch.ID)
				{
					this.chkShowSearch.Checked = GallerySettingsUpdateable.ShowSearch;
					return false;
				}
			}

			return true;
		}

		#endregion

		#region Private Methods

		private void ConfigureControlsFirstTime()
		{
			AdminPageTitle = Resources.GalleryServerPro.Admin_Gallery_Settings_General_Page_Header;

			OkButtonBottom.Enabled = SavingIsEnabled;
			OkButtonTop.Enabled = SavingIsEnabled;

			if (AppSetting.Instance.License.IsInReducedFunctionalityMode)
			{
				ClientMessage = new ClientMessageOptions
													{
														Title = Resources.GalleryServerPro.Admin_Site_Settings_ProductKey_NotEntered_Label,
														Message = Resources.GalleryServerPro.Admin_Need_Product_Key_Msg2,
														Style = MessageStyle.Info
													};

				OkButtonBottom.Enabled = false;
				OkButtonTop.Enabled = false;
			}

			this.wwDataBinder.DataBind();

			hdnUsersToNotify.Value = UsersToNotifyWhenErrorOccursCollection.ToJson();

			CheckForMessages();
		}

		private void ConfigureUsersToNotifyComboBox()
		{
			// Add the users to the list, pre-selecting any that are specified in the setting
			var userListItems = new List<ListItem>();

			foreach (var userName in UsersWithAdminPermission)
			{
				userListItems.Add(new ListItem(userName, userName));

				if (this.UsersToNotifyWhenErrorOccursCollection.Contains(userName))
				{
					userListItems[userListItems.Count - 1].Selected = true;
				}
			}

			cblU.Items.Clear();
			cblU.Items.AddRange(userListItems.ToArray());
		}

		private void ConfigureControlsEveryTime()
		{
			this.PageTitle = Resources.GalleryServerPro.Admin_Gallery_Settings_General_Page_Header;
			lblGalleryDescription.Text = String.Format(CultureInfo.InvariantCulture, Resources.GalleryServerPro.Admin_Gallery_Description_Label, Utils.GetCurrentPageUrl(), Utils.HtmlEncode(Factory.LoadGallery(GalleryId).Description));

			ConfigureUsersToNotifyComboBox();
		}

		private void SaveSettings()
		{
			// Step 1: Update config manually with those items that are not managed via the wwDataBinder
			UnbindUsersToNotifyWhenErrorOccurs();

			// Step 2: Save
			this.wwDataBinder.Unbind(this);

			if (wwDataBinder.BindingErrors.Count > 0)
			{
				ClientMessage = new ClientMessageOptions
				{
					Title = Resources.GalleryServerPro.Validation_Summary_Text,
					Message = wwDataBinder.BindingErrors.ToString(),
					Style = MessageStyle.Error
				};

				return;
			}

			GallerySettingsUpdateable.Save();

			HelperFunctions.PurgeCache();

			// Since we are changing settings that affect how and which controls are rendered to the page, let us redirect to the current page and
			// show the save success message. If we simply show a message without redirecting, two things happen: (1) the user doesn't see the effect
			// of their change until the next page load, (2) there is the potential for a viewstate validation error
			const MessageType msg = MessageType.SettingsSuccessfullyChanged;

			Utils.Redirect(PageId.admin_gallerysettings, "aid={0}&msg={1}", GetAlbumId(), ((int)msg).ToString(CultureInfo.InvariantCulture));
		}

		/// <summary>
		/// Gets the list of users to notify when an error occurs, validate it, and assign it to the writeable version of
		/// <see cref="IGallerySettings.UsersToNotifyWhenErrorOccurs" />, where later it will be persisted to the data store.
		/// The values are retrieved from a hidden field that is maintained by the jQuery MultiSelect widget.
		/// </summary>
		private void UnbindUsersToNotifyWhenErrorOccurs()
		{
			GallerySettingsUpdateable.UsersToNotifyWhenErrorOccurs.Clear();

			foreach (var userName in GetUsersToNotifyUserNames())
			{
				if (!UsersWithAdminPermission.Contains(userName.Trim()))
					continue;

				var user = UserController.GetUser(userName.Trim(), false);

				if (user != null)
				{
					if (!HelperFunctions.IsValidEmail(user.Email))
					{
						wwDataBinder.AddBindingError(String.Format(CultureInfo.InvariantCulture, Resources.GalleryServerPro.Admin_General_Invalid_User_Email_Msg, userName.Trim()), cblU);
						return;
					}

					GallerySettingsUpdateable.UsersToNotifyWhenErrorOccurs.Add(user);
				}
			}
		}

		/// <summary>
		/// Gets the list of usernames representing users to be notified when an error occurs. This is created from the hidden
		/// form field that is maintained by the jQuery MultiSelect plugin.
		/// </summary>
		/// <returns>IEnumerable{System.String}.</returns>
		private IEnumerable<string> GetUsersToNotifyUserNames()
		{
			var usersToNotifyStr = hdnUsersToNotify.Value;

			if (String.IsNullOrWhiteSpace(usersToNotifyStr))
				return new string[] { };

			try
			{
				return usersToNotifyStr.FromJson<string[]>() ?? new string[] { };
			}
			catch (InvalidCastException ex)
			{
				AppEventController.LogError(ex, GalleryId);
				return new string[] { };
			}
		}

		private void CheckForMessages()
		{
			if (ClientMessage != null && ClientMessage.MessageId == MessageType.SettingsSuccessfullyChanged)
			{
				ClientMessage.Title = Resources.GalleryServerPro.Admin_Save_Success_Hdr;
				ClientMessage.Message = Resources.GalleryServerPro.Admin_Save_Success_Text;
			}

			// Check for a second situation we might need to tell the user about.
			if (!GallerySettingsUpdateable.ShowHeader && GallerySettingsUpdateable.AllowManageOwnAccount)
			{
				if (ClientMessage == null)
				{
					ClientMessage = new ClientMessageOptions
					{
						Title = "INFO: Header is hidden"
					};
				}

				ClientMessage.Style = MessageStyle.Info;
				ClientMessage.Message += "<p>" + Resources.GalleryServerPro.Admin_Gallery_Settings_Cannot_Display_Account_Edit_Link_Msg + "</p>";
				ClientMessage.AutoCloseDelay = 0;
			}
		}

		#endregion
	}
}